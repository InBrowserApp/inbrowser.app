{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/@jsquash+oxipng@2.0.0/node_modules/@jsquash/oxipng/codec/pkg-parallel/snippets/wasm-bindgen-rayon-7afa899f36665473/src/workerHelpers.js", "../../../node_modules/.pnpm/@jsquash+oxipng@2.0.0/node_modules/@jsquash/oxipng/codec/pkg-parallel/squoosh_oxipng.js", "../../../node_modules/.pnpm/@jsquash+oxipng@2.0.0/node_modules/@jsquash/oxipng/codec/pkg/squoosh_oxipng.js", "../../../node_modules/.pnpm/@jsquash+oxipng@2.0.0/node_modules/@jsquash/oxipng/meta.js", "../../../node_modules/.pnpm/wasm-feature-detect@1.6.1/node_modules/wasm-feature-detect/dist/esm/index.js", "../../../node_modules/.pnpm/@jsquash+oxipng@2.0.0/node_modules/@jsquash/oxipng/optimise.js", "optimize-png.worker.raw.ts"],
  "sourcesContent": ["/**\n * Copyright 2021 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Note: we use `wasm_bindgen_worker_`-prefixed message types to make sure\n// we can handle bundling into other files, which might happen to have their\n// own `postMessage`/`onmessage` communication channels.\n//\n// If we didn't take that into the account, we could send much simpler signals\n// like just `0` or whatever, but the code would be less resilient.\n\nfunction waitForMsgType(target, type) {\n  return new Promise(resolve => {\n    target.addEventListener('message', function onMsg({ data }) {\n      if (data == null || data.type !== type) return;\n      target.removeEventListener('message', onMsg);\n      resolve(data);\n    });\n  });\n}\n\nwaitForMsgType(self, 'wasm_bindgen_worker_init').then(async data => {\n  // # Note 1\n  // Our JS should have been generated in\n  // `[out-dir]/snippets/wasm-bindgen-rayon-[hash]/workerHelpers.js`,\n  // resolve the main module via `../../..`.\n  //\n  // This might need updating if the generated structure changes on wasm-bindgen\n  // side ever in the future, but works well with bundlers today. The whole\n  // point of this crate, after all, is to abstract away unstable features\n  // and temporary bugs so that you don't need to deal with them in your code.\n  //\n  // # Note 2\n  // This could be a regular import, but then some bundlers complain about\n  // circular deps.\n  //\n  // Dynamic import could be cheap if this file was inlined into the parent,\n  // which would require us just using `../../..` in `new Worker` below,\n  // but that doesn't work because wasm-pack unconditionally adds\n  // \"sideEffects\":false (see below).\n  //\n  // OTOH, even though it can't be inlined, it should be still reasonably\n  // cheap since the requested file is already in cache (it was loaded by\n  // the main thread).\n  const pkg = await import('../../..');\n  await pkg.default(data.module, data.memory);\n  postMessage({ type: 'wasm_bindgen_worker_ready' });\n  pkg.wbg_rayon_start_worker(data.receiver);\n});\n\n// Note: this is never used, but necessary to prevent a bug in Firefox\n// (https://bugzilla.mozilla.org/show_bug.cgi?id=1702191) where it collects\n// Web Workers that have a shared WebAssembly memory with the main thread,\n// but are not explicitly rooted via a `Worker` instance.\n//\n// By storing them in a variable, we can keep `Worker` objects around and\n// prevent them from getting GC-d.\nlet _workers;\n\nexport async function startWorkers(module, memory, builder) {\n  const workerInit = {\n    type: 'wasm_bindgen_worker_init',\n    module,\n    memory,\n    receiver: builder.receiver()\n  };\n\n  _workers = await Promise.all(\n    Array.from({ length: builder.numThreads() }, async () => {\n      // Self-spawn into a new Worker.\n      //\n      // TODO: while `new URL('...', import.meta.url) becomes a semi-standard\n      // way to get asset URLs relative to the module across various bundlers\n      // and browser, ideally we should switch to `import.meta.resolve`\n      // once it becomes a standard.\n      //\n      // Note: we could use `../../..` as the URL here to inline workerHelpers.js\n      // into the parent entry instead of creating another split point -\n      // this would be preferable from optimization perspective -\n      // however, Webpack then eliminates all message handler code\n      // because wasm-pack produces \"sideEffects\":false in package.json\n      // unconditionally.\n      //\n      // The only way to work around that is to have side effect code\n      // in an entry point such as Worker file itself.\n      const worker = new Worker(new URL('./workerHelpers.js', import.meta.url), {\n        type: 'module'\n      });\n      worker.postMessage(workerInit);\n      await waitForMsgType(worker, 'wasm_bindgen_worker_ready');\n      return worker;\n    })\n  );\n  builder.build();\n}\n", "import { startWorkers } from './snippets/wasm-bindgen-rayon-7afa899f36665473/src/workerHelpers.js';\n\nlet wasm;\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); };\n\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8Memory0().slice(ptr, ptr + len));\n}\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {Uint8Array} data\n* @param {number} level\n* @param {boolean} interlace\n* @param {boolean} optimize_alpha\n* @returns {Uint8Array}\n*/\nexport function optimise(data, level, interlace, optimize_alpha) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.optimise(retptr, ptr0, len0, level, interlace, optimize_alpha);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v2 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v2;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n/**\n* @param {number} num_threads\n* @returns {Promise<any>}\n*/\nexport function initThreadPool(num_threads) {\n    const ret = wasm.initThreadPool(num_threads);\n    return takeObject(ret);\n}\n\n/**\n* @param {number} receiver\n*/\nexport function wbg_rayon_start_worker(receiver) {\n    wasm.wbg_rayon_start_worker(receiver);\n}\n\n/**\n*/\nexport class wbg_rayon_PoolBuilder {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(wbg_rayon_PoolBuilder.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_wbg_rayon_poolbuilder_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    numThreads() {\n        const ret = wasm.wbg_rayon_poolbuilder_numThreads(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    receiver() {\n        const ret = wasm.wbg_rayon_poolbuilder_receiver(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    */\n    build() {\n        wasm.wbg_rayon_poolbuilder_build(this.__wbg_ptr);\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_module = function() {\n        const ret = __wbg_init.__wbindgen_wasm_module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_startWorkers_6fd3af285ea11136 = function(arg0, arg1, arg2) {\n        const ret = startWorkers(takeObject(arg0), takeObject(arg1), wbg_rayon_PoolBuilder.__wrap(arg2));\n        return addHeapObject(ret);\n    };\n\n    return imports;\n}\n\nfunction __wbg_init_memory(imports, maybe_memory) {\n    imports.wbg.memory = maybe_memory || new WebAssembly.Memory({initial:18,maximum:16384,shared:true});\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedInt32Memory0 = null;\n    cachedUint8Memory0 = null;\n\n    wasm.__wbindgen_start();\n    return wasm;\n}\n\nfunction initSync(module, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n    const imports = __wbg_get_imports();\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(input, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n    if (typeof input === 'undefined') {\n        input = new URL('squoosh_oxipng_bg.wasm', import.meta.url);\n    }\n    const imports = __wbg_get_imports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    const { instance, module } = await __wbg_load(await input, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nexport { initSync }\nexport default __wbg_init;\n", "let wasm;\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); };\n\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {Uint8Array} data\n* @param {number} level\n* @param {boolean} interlace\n* @param {boolean} optimize_alpha\n* @returns {Uint8Array}\n*/\nexport function optimise(data, level, interlace, optimize_alpha) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.optimise(retptr, ptr0, len0, level, interlace, optimize_alpha);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v2 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v2;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n\n    return imports;\n}\n\nfunction __wbg_init_memory(imports, maybe_memory) {\n\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedInt32Memory0 = null;\n    cachedUint8Memory0 = null;\n\n\n    return wasm;\n}\n\nfunction initSync(module) {\n    if (wasm !== undefined) return wasm;\n\n    const imports = __wbg_get_imports();\n\n    __wbg_init_memory(imports);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(input) {\n    if (wasm !== undefined) return wasm;\n\n    if (typeof input === 'undefined') {\n        input = new URL('squoosh_oxipng_bg.wasm', import.meta.url);\n    }\n    const imports = __wbg_get_imports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    __wbg_init_memory(imports);\n\n    const { instance, module } = await __wbg_load(await input, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nexport { initSync }\nexport default __wbg_init;\n", "export const label = 'OXIPNG';\nexport const mimeType = 'image/png';\nexport const extension = 'png';\nexport const defaultOptions = {\n    level: 2,\n    interlace: false,\n    optimiseAlpha: false,\n};\n", "export const bigInt=()=>(async e=>{try{return(await WebAssembly.instantiate(e)).instance.exports.b(BigInt(0))===BigInt(0)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,1,126,1,126,3,2,1,0,7,5,1,1,98,0,0,10,6,1,4,0,32,0,11])),bulkMemory=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,3,1,0,1,10,14,1,12,0,65,0,65,0,65,0,252,10,0,0,11])),exceptions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,6,64,25,11,11])),extendedConst=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,0,1,11,9,1,0,65,1,65,2,106,11,0])),gc=()=>(async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,95,1,120,0])))(),jspi=()=>(async()=>\"Suspender\"in WebAssembly)(),memory64=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,4,1])),multiMemory=()=>(async()=>{try{return new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,5,5,2,0,0,0,0])),!0}catch(e){return!1}})(),multiValue=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,0,2,127,127,3,2,1,0,10,8,1,6,0,65,0,65,0,11])),mutableGlobals=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,2,8,1,1,97,1,98,3,127,1,6,6,1,127,1,65,0,11,7,5,1,1,97,3,1])),referenceTypes=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,7,1,5,0,208,112,26,11])),relaxedSimd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,15,1,13,0,65,1,253,15,65,2,253,15,253,128,2,11])),saturatedFloatToInt=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,12,1,10,0,67,0,0,0,0,252,0,26,11])),signExtensions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,65,0,192,26,11])),simd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11])),streamingCompilation=()=>(async()=>\"compileStreaming\"in WebAssembly)(),tailCall=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,6,1,4,0,18,0,11])),threads=()=>(async e=>{try{return\"undefined\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(e)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])),typeReflection=()=>(async()=>\"Function\"in WebAssembly)();\n", "/**\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { defaultOptions } from './meta';\nimport { threads } from 'wasm-feature-detect';\nasync function initMT(moduleOrPath) {\n    const { default: init, initThreadPool, optimise, } = await import('./codec/pkg-parallel/squoosh_oxipng');\n    await init(moduleOrPath);\n    await initThreadPool(globalThis.navigator.hardwareConcurrency);\n    return optimise;\n}\nasync function initST(moduleOrPath) {\n    const { default: init, optimise } = await import('./codec/pkg/squoosh_oxipng');\n    await init(moduleOrPath);\n    return optimise;\n}\nlet wasmReady;\nexport async function init(moduleOrPath) {\n    var _a;\n    if (!wasmReady) {\n        const hasHardwareConcurrency = ((_a = globalThis.navigator) === null || _a === void 0 ? void 0 : _a.hardwareConcurrency) > 1;\n        const isWorker = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;\n        // We only use multi-threading if the browser has threads and we're in a Worker context\n        // This is a caveat of threading library we use (wasm-bindgen-rayon)\n        if (isWorker && hasHardwareConcurrency && await threads()) {\n            wasmReady = initMT(moduleOrPath);\n        }\n        else {\n            wasmReady = initST(moduleOrPath);\n        }\n    }\n    return wasmReady;\n}\nexport default async function optimise(data, options = {}) {\n    const _options = { ...defaultOptions, ...options };\n    const optimise = await init();\n    ;\n    return optimise(new Uint8Array(data), _options.level, _options.interlace, _options.optimiseAlpha)\n        .buffer;\n}\n", "import optimiseRaw, { init } from \"@jsquash/oxipng/optimise\";\n\nonmessage = async function (event: MessageEvent) {\n  const [wasmURL, blob] = event.data;\n\n  await init(wasmURL);\n\n  const arraybuffer = await blob.arrayBuffer();\n  const optimisedArrayBuffer = await optimiseRaw(arraybuffer);\n  const optimisedBlob = new Blob([optimisedArrayBuffer], {\n    type: blob.type,\n  });\n\n  this.postMessage(optimisedBlob);\n};\n"],
  "mappings": "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",
  "names": ["waitForMsgType", "target", "type", "resolve", "onMsg", "data", "startWorkers", "module", "memory", "builder", "workerInit", "_workers", "worker", "import_meta", "init_workerHelpers", "__esmMin", "pkg", "squoosh_oxipng_exports", "__export", "squoosh_oxipng_default", "initSync", "initThreadPool", "optimise", "wbg_rayon_PoolBuilder", "wbg_rayon_start_worker", "getUint8Memory0", "cachedUint8Memory0", "wasm", "getStringFromWasm0", "ptr", "len", "cachedTextDecoder", "addHeapObject", "obj", "heap_next", "heap", "idx", "passArray8ToWasm0", "arg", "malloc", "WASM_VECTOR_LEN", "getInt32Memory0", "cachedInt32Memory0", "getArrayU8FromWasm0", "data", "level", "interlace", "optimize_alpha", "retptr", "ptr0", "len0", "r0", "r1", "v2", "getObject", "dropObject", "takeObject", "ret", "num_threads", "receiver", "__wbg_load", "module", "imports", "e", "bytes", "instance", "__wbg_get_imports", "arg0", "arg1", "__wbg_init", "arg2", "startWorkers", "__wbg_init_memory", "maybe_memory", "__wbg_finalize_init", "input", "import_meta", "init_squoosh_oxipng", "__esmMin", "init_workerHelpers", "_wbg_rayon_PoolBuilder", "squoosh_oxipng_exports", "__export", "squoosh_oxipng_default", "initSync", "optimise", "getUint8Memory0", "cachedUint8Memory0", "wasm", "getStringFromWasm0", "ptr", "len", "cachedTextDecoder", "passArray8ToWasm0", "arg", "malloc", "WASM_VECTOR_LEN", "getInt32Memory0", "cachedInt32Memory0", "getArrayU8FromWasm0", "data", "level", "interlace", "optimize_alpha", "retptr", "ptr0", "len0", "r0", "r1", "v2", "__wbg_load", "module", "imports", "e", "bytes", "instance", "__wbg_get_imports", "arg0", "arg1", "__wbg_finalize_init", "__wbg_init", "input", "import_meta", "init_squoosh_oxipng", "__esmMin", "defaultOptions", "threads", "e", "initMT", "moduleOrPath", "init", "initThreadPool", "optimise", "initST", "wasmReady", "_a", "hasHardwareConcurrency", "threads", "data", "options", "_options", "defaultOptions", "event", "wasmURL", "blob", "init", "arraybuffer", "optimisedArrayBuffer", "optimise", "optimisedBlob"]
}
